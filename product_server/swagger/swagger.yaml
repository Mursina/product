openapi: 3.0.3
info:
  title: Swagger Productstore - OpenAPI 3.0
  version: v1
servers:
- url: /v1/
paths:
  /products:
    get:
      tags:
      - product
      summary: List the products
      description: "Display the products in the store, by default it lists 10 products"
      operationId: list_products
      parameters:
      - name: noOfProducts
        in: query
        description: Specify the number of products to be listed
        required: false
        style: form
        explode: false
        schema:
          type: integer
          format: int64
          example: 10
      - name: brand_name
        in: query
        description: Filter the products using brand name
        required: false
        style: form
        explode: false
        schema:
          type: string
          example: "Tommy"
      - name: skip
        in: query
        description: Specify the number of products to be skipped
        required: false
        style: form
        explode: false
        schema:
          type: integer
          format: int64
          example: 2
      - name: limit
        in: query
        description: Specify the number of products to be shown
        required: false
        style: form
        explode: false
        schema:
          type: integer
          format: int64
          example: 9
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
                x-content-type: application/json
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
      security:
      - basicAuth: []
      x-openapi-router-controller: product_server.controllers.product_controller
  /product/{productId}:
    get:
      tags:
      - product
      summary: Find product by ID
      description: Returns a single product
      operationId: get_product_by_id
      parameters:
      - name: productId
        in: path
        description: ID of product to return
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
          example: 2
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
            application/xml:
              schema:
                $ref: '#/components/schemas/Product'
        "400":
          description: Invalid ID supplied
        "404":
          description: Product not found
      security:
      - basicAuth: []
      x-openapi-router-controller: product_server.controllers.product_controller
    delete:
      tags:
      - product
      summary: Deletes a product
      description: delete a product
      operationId: delete_product
      parameters:
      - name: api_key
        in: header
        description: ""
        required: false
        style: simple
        explode: false
        schema:
          type: string
      - name: productId
        in: path
        description: Product id to delete
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "400":
          description: Invalid product value
      security:
      - basicAuth: []
      x-openapi-router-controller: product_server.controllers.product_controller
  /product:
    post:
      tags:
      - product
      summary: Add a new product to the store
      description: Add a new product to the store
      operationId: add_product
      requestBody:
        description: Create a new product in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
        required: true
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
            application/xml:
              schema:
                $ref: '#/components/schemas/Product'
        "405":
          description: Invalid input
      security:
      - basicAuth: []
      x-openapi-router-controller: product_server.controllers.product_controller
components:
  schemas:
    Product:
      required:
      - id
      properties:
        id:
          type: integer
          format: int64
          example: 1
        sku:
          type: string
          example: "2842534"
        brand:
          type: string
          example: "Tommy"
        slug:
          type: string
          example: "high-split-solid-shirt"
        title:
          type: string
          example: "High split shirt"
        quantity:
          type: integer
          format: int64
          example: 1
      example:
        quantity: 1
        id: 1
        sku: "2842534"
        brand: "Tommy"
        slug: "high-split-solid-shirt"
        title: "High split shirt"
      xml:
        name: product
  securitySchemes:
    basicAuth:
      type: http
      scheme: basic
      x-basicInfoFunc: product_server.controllers.authorization_controller.check_basicAuth